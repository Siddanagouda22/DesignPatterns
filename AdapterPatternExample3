public class Employee
{
    public int Id { get; set; }
    public string Name { get; set; } = string.Empty;
    public decimal Salary { get; set; }
}

/// <summary>
/// The Client Interface describes a protocol that other classes must follow to be able to collaborate with the client code.
/// </summary>
public interface ISalaryProcessor
{
    void ProcessSalaries(string[,] rawEmployees);
}

/// <summary>
/// This class contains the functionality which the client requires,
/// but it's not compatible with the existing client code.
/// So, it requires some adaptation before the client code can use it.
/// </summary>
public class HRSystem
{
    public string[,] GetEmployeesInfo() =>
        new string[4, 3]
        {
            { "1", "John", "5950" },
            { "2", "Anna", "5800" },
            { "3", "Nicole", "6100" },
            { "4", "Steven", "5000" },
        };
}

/// <summary>
/// The Service is some useful class (usually 3rd-party or legacy).
/// The client can’t use this class directly because it has an incompatible interface.
/// </summary>
public class ThirdPartyBillingSystem
{
    public void ProcessSalary(List<Employee> employees)
    {
        foreach (var employee in employees)
        {
            Console.WriteLine($"EUR {employee.Salary} salary credited to {employee.Name}'s account.");
        }
    }
}

/// <summary>
/// This is a class which makes two incompatible systems to work together.
/// The Adapter is a class that’s able to work with both the client and the service:
/// it implements the client interface, while wrapping the service object.
/// The adapter receives calls from the client via the adapter interface and translates them
/// into calls to the wrapped service object in a format it can understand.
/// </summary>
public class HRSystemAdapter : ISalaryProcessor
{
    private readonly ThirdPartyBillingSystem _thirdPartyBillingSystem;

    public HRSystemAdapter()
    {
        _thirdPartyBillingSystem = new ThirdPartyBillingSystem();
    }

    public void ProcessSalaries(string[,] rawEmployees)
    {
        var employeesForProcessing = PrepareEmployeesForSalaryProcessing(rawEmployees);
        _thirdPartyBillingSystem.ProcessSalary(employeesForProcessing);
    }

    private static List<Employee> PrepareEmployeesForSalaryProcessing(string[,] rawEmployees)
    {
        var employeesForProcessing = new List<Employee>();

        for (var i = 0; i < rawEmployees.GetLength(0); i++)
        {
            var id = string.Empty;
            var name = string.Empty;
            var salary = string.Empty;

            for (var j = 0; j < rawEmployees.GetLength(1); j++)
            {
                switch (j)
                {
                    case 0:
                        id = rawEmployees[i, j];
                        break;
                    case 1:
                        name = rawEmployees[i, j];
                        break;
                    default:
                        salary = rawEmployees[i, j];
                        break;
                }
            }

            var employee = new Employee
            {
                Id = Convert.ToInt32(id, CultureInfo.InvariantCulture),
                Name = name,
                Salary = Convert.ToDecimal(salary, CultureInfo.InvariantCulture),
            };
            employeesForProcessing.Add(employee);
        }

        Console.WriteLine("Adapter converted array of employees to list of employees...");

        return employeesForProcessing;
    }
}

------------------------------------------------------------------------------------------------
public static class BillingSystemExecutor
{
    /// <summary>
    /// The client code doesn't get coupled to the concrete adapter class as long as it works with the adapter via the client interface.
    /// Thanks to this, you can introduce new types of adapters into the program without breaking the existing client code.
    /// This can be useful when the interface of the service class gets changed or replaced:
    /// you can just create a new adapter class without changing the client code.
    /// </summary>
    public static void Execute()
    {
        ConsoleExtension.WriteSeparator("Billing system example");

        HRSystem hrSystem = new HRSystem();
        string[,] employeesInfo = hrSystem.GetEmployeesInfo();

        // Existing HR system wants to process salaries,
        // but since it isn't compatible with the 3rd party billing system interface we must use adapter.
        // The 3rd party billing system expects List<Employee>, but the current HR system works only with string[,].
        // Hide that using adapter design pattern (note that the client is not aware of what's happening under the hood).
        // The client code doesn't get coupled to the concrete adapter class as long as it works with the adapter via the interface.
        // In this case the client is coupled with the concrete adapter class only because we don't use dependency injection for demo purposes.
        ISalaryProcessor salaryProcessor = new HRSystemAdapter();
        salaryProcessor.ProcessSalaries(employeesInfo);
    }
}

------------------------------------------------------------------------

public class Executor : PatternExecutor
{
    public override string Name => "Adapter - Structural Pattern";

    public override void Execute()
    {
        BillingSystemExecutor.Execute();
    }
}

