/// <summary>
/// The Adapter is a class thatâ€™s able to work with both the client and the service:
/// it implements the client interface, while wrapping the service object.
/// The adapter receives calls from the client via the adapter interface and translates them
/// into calls to the wrapped service object in a format it can understand.
/// </summary>

public interface IDuck
    {
        void Quack();
        void Fly();
    }
--=========================================
public interface ITurkey
    {
        void Gobble();
        void Fly();
    }
--=========================================
class MallardDuck : IDuck
    {
        public void Quack()
        {
            Console.WriteLine("Quack Quack Quack");
        }

        public void Fly()
        {
            Console.WriteLine("Flies 500 Metres");
        }
    }
--=================================================
 class WildTurkey : ITurkey
    {
        public void Gobble()
        {
            Console.WriteLine("Gobble Gobble Gobble");
        }

        public void Fly()
        {
            Console.WriteLine("Flies 100 Metres");
        }
    }
--=================================================
 public class TurkeyAdapter : IDuck
    {
        private readonly ITurkey _turkey;

        public TurkeyAdapter(ITurkey turkey)
        {
            _turkey = turkey;
        }
        public void Quack()
        {
            _turkey.Gobble();
        }

        public void Fly()
        {
            for (var i = 0; i < 5; i++)
            {
                _turkey.Fly();
                Console.WriteLine("Resting..");
            }
        }
    }
--========================================================
        private static void Main()
        {
            var turkey = new WildTurkey();
            var adapter = new TurkeyAdapter(turkey);

            Tester(adapter);
        }
--========================================================
        private static void Tester(IDuck duck)
        {
            duck.Fly();
            duck.Quack();
        }
